package sijay.zheng.experience.leetcode.hard;
/**
 题目191：子数组中占绝大多数的元素
<p>设计一个数据结构，有效地找到给定子数组的 <strong>多数元素</strong> 。</p>

<p>子数组的 <strong>多数元素</strong> 是在子数组中出现<code>threshold</code>次数或次数以上的元素。</p>

<p>实现 <code>MajorityChecker</code> 类:</p>

<ul>
	<li><code>MajorityChecker(int[] arr)</code>会用给定的数组 <code>arr</code>对<code>MajorityChecker</code> 初始化。</li>
	<li><code>int query(int left, int right, int threshold)</code>返回子数组中的元素 <code>arr[left...right]</code>至少出现<code>threshold</code>次数，如果不存在这样的元素则返回 <code>-1</code>。</li>
</ul>

<p></p>

<p><strong>示例 1：</strong></p>

<pre>
<strong>输入:</strong>
["MajorityChecker", "query", "query", "query"]
[[[1, 1, 2, 2, 1, 1]], [0, 5, 4], [0, 3, 3], [2, 3, 2]]
<strong>输出：</strong>
[null, 1, -1, 2]

<b>解释：</b>
MajorityChecker majorityChecker = new MajorityChecker([1,1,2,2,1,1]);
majorityChecker.query(0,5,4); // 返回 1
majorityChecker.query(0,3,3); // 返回 -1
majorityChecker.query(2,3,2); // 返回 2
</pre>

<p></p>

<p><strong>提示：</strong></p>

<ul>
	<li><code>1 &lt;= arr.length &lt;= 2 * 10<sup>4</sup></code></li>
	<li><code>1 &lt;= arr[i] &lt;= 2 * 10<sup>4</sup></code></li>
	<li><code>0 &lt;= left &lt;= right &lt; arr.length</code></li>
	<li><code>threshold &lt;= right - left + 1</code></li>
	<li><code>2 * threshold &gt; right - left + 1</code></li>
	<li>调用<code>query</code>的次数最多为<code>10<sup>4</sup></code></li>
</ul>

*/
 class Q191 {public static void main(String[] args) {}
class MajorityChecker {

    public MajorityChecker(int[] arr) {

    }
    
    public int query(int left, int right, int threshold) {

    }
}

/**
Your MajorityChecker object will be instantiated and called as such:
MajorityChecker obj = new MajorityChecker(arr);
int param_1 = obj.query(left,right,threshold);
 */
}