package sijay.zheng.experience.leetcode.medium;
/**
 题目349：设计循环双端队列
<p>设计实现双端队列。</p>

<p>实现 <code>MyCircularDeque</code> 类:</p>

<ul>
	<li><code>MyCircularDeque(int k)</code>：构造函数,双端队列最大为 <code>k</code> 。</li>
	<li><code>boolean insertFront()</code>：将一个元素添加到双端队列头部。 如果操作成功返回 <code>true</code>，否则返回 <code>false</code> 。</li>
	<li><code>boolean insertLast()</code>：将一个元素添加到双端队列尾部。如果操作成功返回 <code>true</code>，否则返回 <code>false</code> 。</li>
	<li><code>boolean deleteFront()</code>：从双端队列头部删除一个元素。 如果操作成功返回 <code>true</code>，否则返回 <code>false</code> 。</li>
	<li><code>boolean deleteLast()</code>：从双端队列尾部删除一个元素。如果操作成功返回 <code>true</code>，否则返回 <code>false</code> 。</li>
	<li><code>int getFront()</code>)：从双端队列头部获得一个元素。如果双端队列为空，返回 <code>-1</code>。</li>
	<li><code>int getRear()</code>：获得双端队列的最后一个元素。如果双端队列为空，返回 <code>-1</code> 。</li>
	<li><code>boolean isEmpty()</code>：若双端队列为空，则返回<code>true</code>，否则返回 <code>false</code> 。</li>
	<li><code>boolean isFull()</code>：若双端队列满了，则返回<code>true</code>，否则返回 <code>false</code> 。</li>
</ul>

<p></p>

<p><strong>示例 1：</strong></p>

<pre>
<strong>输入</strong>
["MyCircularDeque", "insertLast", "insertLast", "insertFront", "insertFront", "getRear", "isFull", "deleteLast", "insertFront", "getFront"]
[[3], [1], [2], [3], [4], [], [], [], [4], []]
<strong>输出</strong>
[null, true, true, true, false, 2, true, true, true, 4]

<strong>解释</strong>
MyCircularDeque circularDeque = new MycircularDeque(3); // 设置容量大小为3
circularDeque.insertLast(1);			        // 返回 true
circularDeque.insertLast(2);			        // 返回 true
circularDeque.insertFront(3);			        // 返回 true
circularDeque.insertFront(4);			        // 已经满了，返回 false
circularDeque.getRear();  				// 返回 2
circularDeque.isFull();				        // 返回 true
circularDeque.deleteLast();			        // 返回 true
circularDeque.insertFront(4);			        // 返回 true
circularDeque.getFront();				// 返回 4
</pre>

<p></p>

<p><strong>提示：</strong></p>

<ul>
	<li><code>1 &lt;= k &lt;= 1000</code></li>
	<li><code>0 &lt;= value &lt;= 1000</code></li>
	<li><code>insertFront</code>,<code>insertLast</code>,<code>deleteFront</code>,<code>deleteLast</code>,<code>getFront</code>,<code>getRear</code>,<code>isEmpty</code>,<code>isFull</code> 调用次数不大于<code>2000</code>次</li>
</ul>

*/
 class Q349 {public static void main(String[] args) {Solution solution=new Solution();}
class MyCircularDeque {

    public MyCircularDeque(int k) {

    }
    
    public boolean insertFront(int value) {

    }
    
    public boolean insertLast(int value) {

    }
    
    public boolean deleteFront() {

    }
    
    public boolean deleteLast() {

    }
    
    public int getFront() {

    }
    
    public int getRear() {

    }
    
    public boolean isEmpty() {

    }
    
    public boolean isFull() {

    }
}

/**
Your MyCircularDeque object will be instantiated and called as such:
MyCircularDeque obj = new MyCircularDeque(k);
boolean param_1 = obj.insertFront(value);
boolean param_2 = obj.insertLast(value);
boolean param_3 = obj.deleteFront();
boolean param_4 = obj.deleteLast();
int param_5 = obj.getFront();
int param_6 = obj.getRear();
boolean param_7 = obj.isEmpty();
boolean param_8 = obj.isFull();
 */
}