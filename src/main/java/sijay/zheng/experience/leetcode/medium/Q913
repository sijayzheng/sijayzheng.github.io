package sijay.zheng.experience.leetcode.medium;
/**
 题目913：K 次增加后的最大乘积
<p>给你一个非负整数数组<code>nums</code>和一个整数<code>k</code>。每次操作，你可以选择<code>nums</code>中 <strong>任一</strong>元素并将它 <strong>增加</strong><code>1</code>。</p>

<p>请你返回 <strong>至多</strong><code>k</code>次操作后，能得到的<em></em><code>nums</code>的<strong>最大乘积</strong>。由于答案可能很大，请你将答案对<code>10<sup>9</sup> + 7</code>取余后返回。</p>

<p></p>

<p><strong>示例 1：</strong></p>

<pre><b>输入：</b>nums = [0,4], k = 5
<b>输出：</b>20
<b>解释：</b>将第一个数增加 5 次。
得到 nums = [5, 4] ，乘积为 5 * 4 = 20 。
可以证明 20 是能得到的最大乘积，所以我们返回 20 。
存在其他增加 nums 的方法，也能得到最大乘积。
</pre>

<p><strong>示例 2：</strong></p>

<pre><b>输入：</b>nums = [6,3,3,2], k = 2
<b>输出：</b>216
<b>解释：</b>将第二个数增加 1 次，将第四个数增加 1 次。
得到 nums = [6, 4, 3, 3] ，乘积为 6 * 4 * 3 * 3 = 216 。
可以证明 216 是能得到的最大乘积，所以我们返回 216 。
存在其他增加 nums 的方法，也能得到最大乘积。
</pre>

<p></p>

<p><strong>提示：</strong></p>

<ul>
	<li><code>1 &lt;= nums.length, k &lt;= 10<sup>5</sup></code></li>
	<li><code>0 &lt;= nums[i] &lt;= 10<sup>6</sup></code></li>
</ul>

*/
 class Q913 {public static void main(String[] args) {}
class Solution {
    public int maximumProduct(int[] nums, int k) {

    }
}
}