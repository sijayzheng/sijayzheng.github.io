package sijay.zheng.leetcode.medium;
/**
 题目620：长度为 n 的开心字符串中字典序第 k 小的字符串
<p>一个 「开心字符串」定义为：</p>

<ul>
	<li>仅包含小写字母<code>[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</code>.</li>
	<li>对所有在<code>1</code>到<code>s.length - 1</code>之间的<code>i</code>，满足<code>s[i] != s[i + 1]</code>（字符串的下标从 1 开始）。</li>
</ul>

<p>比方说，字符串<strong>&quot;abc&quot;</strong>，<strong>&quot;ac&quot;，&quot;b&quot;</strong> 和<strong>&quot;abcbabcbcb&quot;</strong>都是开心字符串，但是<strong>&quot;aa&quot;</strong>，<strong>&quot;baa&quot;</strong>和<strong>&quot;ababbc&quot;</strong>都不是开心字符串。</p>

<p>给你两个整数 <code>n</code>和 <code>k</code>，你需要将长度为 <code>n</code>的所有开心字符串按字典序排序。</p>

<p>请你返回排序后的第 k 个开心字符串，如果长度为 <code>n</code>的开心字符串少于 <code>k</code>个，那么请你返回 <strong>空字符串</strong>。</p>

<p></p>

<p><strong>示例 1：</strong></p>

<pre><strong>输入：</strong>n = 1, k = 3
<strong>输出：</strong>&quot;c&quot;
<strong>解释：</strong>列表 [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;] 包含了所有长度为 1 的开心字符串。按照字典序排序后第三个字符串为 &quot;c&quot; 。
</pre>

<p><strong>示例 2：</strong></p>

<pre><strong>输入：</strong>n = 1, k = 4
<strong>输出：</strong>&quot;&quot;
<strong>解释：</strong>长度为 1 的开心字符串只有 3 个。
</pre>

<p><strong>示例 3：</strong></p>

<pre><strong>输入：</strong>n = 3, k = 9
<strong>输出：</strong>&quot;cab&quot;
<strong>解释：</strong>长度为 3 的开心字符串总共有 12 个 [&quot;aba&quot;, &quot;abc&quot;, &quot;aca&quot;, &quot;acb&quot;, &quot;bab&quot;, &quot;bac&quot;, &quot;bca&quot;, &quot;bcb&quot;, &quot;cab&quot;, &quot;cac&quot;, &quot;cba&quot;, &quot;cbc&quot;] 。第 9 个字符串为 &quot;cab&quot;
</pre>

<p><strong>示例 4：</strong></p>

<pre><strong>输入：</strong>n = 2, k = 7
<strong>输出：</strong>&quot;&quot;
</pre>

<p><strong>示例 5：</strong></p>

<pre><strong>输入：</strong>n = 10, k = 100
<strong>输出：</strong>&quot;abacbabacb&quot;
</pre>

<p></p>

<p><strong>提示：</strong></p>

<ul>
	<li><code>1 &lt;= n &lt;= 10</code></li>
	<li><code>1 &lt;= k &lt;= 100</code></li>
</ul>

<p></p>

*/
 class Q620 {public static void main(String[] args) {Solution solution=new Solution();}
static class Solution {
    public String getHappyString(int n, int k) {

    }
}
}
