package sijay.zheng.leetcode.medium;
/**
 题目871：从二叉树一个节点到另一个节点每一步的方向
<p>给你一棵 <strong>二叉树</strong>的根节点<code>root</code>，这棵二叉树总共有<code>n</code>个节点。每个节点的值为<code>1</code>到<code>n</code>中的一个整数，且互不相同。给你一个整数<code>startValue</code>，表示起点节点 <code>s</code>的值，和另一个不同的整数<code>destValue</code>，表示终点节点<code>t</code>的值。</p>

<p>请找到从节点<code>s</code>到节点 <code>t</code>的 <strong>最短路径</strong>，并以字符串的形式返回每一步的方向。每一步用 <strong>大写</strong>字母<code>'L'</code>，<code>'R'</code>和<code>'U'</code>分别表示一种方向：</p>

<ul>
	<li><code>'L'</code>表示从一个节点前往它的 <strong>左孩子</strong>节点。</li>
	<li><code>'R'</code>表示从一个节点前往它的 <strong>右孩子</strong>节点。</li>
	<li><code>'U'</code>表示从一个节点前往它的 <strong>父</strong>节点。</li>
</ul>

<p>请你返回从 <code>s</code>到 <code>t</code><strong>最短路径</strong>每一步的方向。</p>

<p></p>

<p><strong>示例 1：</strong></p>

<p><img alt="" src="https://assets.leetcode.com/uploads/2021/11/15/eg1.png" style="width: 214px; height: 163px;"></p>

<pre><b>输入：</b>root = [5,1,2,3,null,6,4], startValue = 3, destValue = 6
<b>输出：</b>"UURL"
<b>解释：</b>最短路径为：3 → 1 → 5 → 2 → 6 。
</pre>

<p><strong>示例 2：</strong></p>

<p><img alt="" src="https://assets.leetcode.com/uploads/2021/11/15/eg2.png" style="width: 74px; height: 102px;"></p>

<pre><b>输入：</b>root = [2,1], startValue = 2, destValue = 1
<b>输出：</b>"L"
<b>解释：</b>最短路径为：2 → 1 。
</pre>

<p></p>

<p><strong>提示：</strong></p>

<ul>
	<li>树中节点数目为<code>n</code>。</li>
	<li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li>
	<li><code>1 &lt;= Node.val &lt;= n</code></li>
	<li>树中所有节点的值 <strong>互不相同</strong>。</li>
	<li><code>1 &lt;= startValue, destValue &lt;= n</code></li>
	<li><code>startValue != destValue</code></li>
</ul>

*/
 class Q871 {public static void main(String[] args) {Solution solution=new Solution();}
//Definition for a binary tree node.
class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;
    TreeNode() {}
    TreeNode(int val) { this.val = val; }
    TreeNode(int val, TreeNode left, TreeNode right) {
        this.val = val;
        this.left = left;
        this.right = right;
    }
}
 static class Solution {
    public String getDirections(TreeNode root, int startValue, int destValue) {

    }
}
}
