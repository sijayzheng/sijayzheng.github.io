package sijay.zheng.leetcode.medium;
/**
 题目832：从双倍数组中还原原数组
<p>一个整数数组<code>original</code>可以转变成一个 <strong>双倍</strong>数组<code>changed</code>，转变方式为将 <code>original</code>中每个元素 <strong>值乘以 2 </strong>加入数组中，然后将所有元素 <strong>随机打乱</strong>。</p>

<p>给你一个数组<code>changed</code>，如果<code>change</code>是<strong>双倍</strong>数组，那么请你返回<code>original</code>数组，否则请返回空数组。<code>original</code>的元素可以以<strong>任意</strong>顺序返回。</p>

<p></p>

<p><strong>示例 1：</strong></p>

<pre><b>输入：</b>changed = [1,3,4,2,6,8]
<b>输出：</b>[1,3,4]
<b>解释：</b>一个可能的 original 数组为 [1,3,4] :
- 将 1 乘以 2 ，得到 1 * 2 = 2 。
- 将 3 乘以 2 ，得到 3 * 2 = 6 。
- 将 4 乘以 2 ，得到 4 * 2 = 8 。
其他可能的原数组方案为 [4,3,1] 或者 [3,1,4] 。
</pre>

<p><strong>示例 2：</strong></p>

<pre><b>输入：</b>changed = [6,3,0,1]
<b>输出：</b>[]
<b>解释：</b>changed 不是一个双倍数组。
</pre>

<p><strong>示例 3：</strong></p>

<pre><b>输入：</b>changed = [1]
<b>输出：</b>[]
<b>解释：</b>changed 不是一个双倍数组。
</pre>

<p></p>

<p><strong>提示：</strong></p>

<ul>
	<li><code>1 &lt;= changed.length &lt;= 10<sup>5</sup></code></li>
	<li><code>0 &lt;= changed[i] &lt;= 10<sup>5</sup></code></li>
</ul>

*/
 class Q832 {public static void main(String[] args) {Solution solution=new Solution();}
static class Solution {
    public int[] findOriginalArray(int[] changed) {

    }
}
}
