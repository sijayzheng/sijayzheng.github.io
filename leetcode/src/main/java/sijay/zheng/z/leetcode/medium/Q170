package sijay.zheng.z.leetcode.medium;
/**
 题目170：迷你语法分析器
<p>给定一个字符串 s 表示一个整数嵌套列表，实现一个解析它的语法分析器并返回解析的结果<code>NestedInteger</code> 。</p>

<p>列表中的每个元素只可能是整数或整数嵌套列表</p>

<p></p>

<p><strong>示例 1：</strong></p>

<pre>
<strong>输入：</strong>s = "324",
<strong>输出：</strong>324
<strong>解释：</strong>你应该返回一个 NestedInteger 对象，其中只包含整数值 324。
</pre>

<p><strong>示例 2：</strong></p>

<pre>
<strong>输入：</strong>s = "[123,[456,[789]]]",
<strong>输出：</strong>[123,[456,[789]]]
<strong>解释：</strong>返回一个 NestedInteger 对象包含一个有两个元素的嵌套列表：
1. 一个 integer 包含值 123
2. 一个包含两个元素的嵌套列表：
    i.  一个 integer 包含值 456
    ii. 一个包含一个元素的嵌套列表
         a. 一个 integer 包含值 789
</pre>

<p></p>

<p><strong>提示：</strong></p>

<ul>
	<li><code>1 &lt;= s.length &lt;= 5 * 10<sup>4</sup></code></li>
	<li><code>s</code> 由数字、方括号<code>"[]"</code>、负号<code>'-'</code>、逗号<code>','</code>组成</li>
	<li>用例保证<code>s</code> 是可解析的<code>NestedInteger</code></li>
	<li>输入中的所有值的范围是<code>[-10<sup>6</sup>, 10<sup>6</sup>]</code></li>
</ul>

*/
 class Q170 {public static void main(String[] args) {Solution solution=new Solution();}
/**
// This is the interface that allows for creating nested lists.
// You should not implement it, or speculate about its implementation
public interface NestedInteger {
    // Constructor initializes an empty nested list.
    public NestedInteger();
 *
    // Constructor initializes a single integer.
    public NestedInteger(int value);
 *
    // @return true if this NestedInteger holds a single integer, rather than a nested list.
    public boolean isInteger();
 *
    // @return the single integer that this NestedInteger holds, if it holds a single integer
    // Return null if this NestedInteger holds a nested list
    public Integer getInteger();
 *
    // Set this NestedInteger to hold a single integer.
    public void setInteger(int value);
 *
    // Set this NestedInteger to hold a nested list and adds a nested integer to it.
    public void add(NestedInteger ni);
 *
    // @return the nested list that this NestedInteger holds, if it holds a nested list
    // Return empty list if this NestedInteger holds a single integer
    public List<NestedInteger> getList();
}
 static class Solution {
    public NestedInteger deserialize(String s) {

    }
}
}
