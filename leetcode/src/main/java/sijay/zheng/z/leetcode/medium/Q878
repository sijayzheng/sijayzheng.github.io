package sijay.zheng.z.leetcode.medium;
/**
 题目878：链表最大孪生和
<p>在一个大小为<code>n</code>且 <code>n</code>为<strong>偶数</strong> 的链表中，对于<code>0 &lt;= i &lt;= (n / 2) - 1</code>的 <code>i</code>，第<code>i</code>个节点（下标从 <strong>0</strong>开始）的孪生节点为第<code>(n-1-i)</code>个节点 。</p>

<ul>
	<li>比方说，<code>n = 4</code>那么节点<code>0</code>是节点 <code>3</code>的孪生节点，节点 <code>1</code>是节点 <code>2</code>的孪生节点。这是长度为 <code><span style="">n = 4</span></code>的链表中所有的孪生节点。</li>
</ul>

<p><strong>孪生和</strong>定义为一个节点和它孪生节点两者值之和。</p>

<p>给你一个长度为偶数的链表的头节点<code>head</code>，请你返回链表的 <strong>最大孪生和</strong>。</p>

<p></p>

<p><strong>示例1：</strong></p>

<p><img alt="" src="https://assets.leetcode.com/uploads/2021/12/03/eg1drawio.png" style="width: 250px; height: 70px;"></p>

<pre><b>输入：</b>head = [5,4,2,1]
<b>输出：</b>6
<strong>解释：</strong>
节点 0 和节点 1 分别是节点 3 和 2 的孪生节点。孪生和都为 6 。
链表中没有其他孪生节点。
所以，链表的最大孪生和是 6 。
</pre>

<p><strong>示例 2：</strong></p>

<p><img alt="" src="https://assets.leetcode.com/uploads/2021/12/03/eg2drawio.png" style="width: 250px; height: 70px;"></p>

<pre><b>输入：</b>head = [4,2,2,3]
<b>输出：</b>7
<strong>解释：</strong>
链表中的孪生节点为：
- 节点 0 是节点 3 的孪生节点，孪生和为 4 + 3 = 7 。
- 节点 1 是节点 2 的孪生节点，孪生和为 2 + 2 = 4 。
所以，最大孪生和为 max(7, 4) = 7 。
</pre>

<p><strong>示例 3：</strong></p>

<p><img alt="" src="https://assets.leetcode.com/uploads/2021/12/03/eg3drawio.png" style="width: 200px; height: 88px;"></p>

<pre><b>输入：</b>head = [1,100000]
<b>输出：</b>100001
<strong>解释：</strong>
链表中只有一对孪生节点，孪生和为 1 + 100000 = 100001 。
</pre>

<p></p>

<p><strong>提示：</strong></p>

<ul>
	<li>链表的节点数目是<code>[2, 10<sup>5</sup>]</code>中的<strong>偶数</strong>。</li>
	<li><code>1 &lt;= Node.val &lt;= 10<sup>5</sup></code></li>
</ul>

*/
 class Q878 {public static void main(String[] args) {Solution solution=new Solution();}
//Definition for singly-linked list.
class ListNode {
    int val;
    ListNode next;
    ListNode() {}
    ListNode(int val) { this.val = val; }
    ListNode(int val, ListNode next) { this.val = val; this.next = next; }
}
 static class Solution {
    public int pairSum(ListNode head) {

    }
}
}
