package cn.sijay.suap.${module}.service;

import cn.sijay.suap.core.base.IBaseService;
import cn.sijay.suap.core.enums.ExceptionEnum;
import cn.sijay.suap.core.exception.BaseException;
import cn.sijay.suap.core.util.StringUtil;
import cn.sijay.suap.${module}.entity.${className};
import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.extension.service.IService;
import org.apache.commons.lang3.ObjectUtils;
import org.springframework.web.multipart.MultipartFile;

/**
 * <p>
 * <em>I${className}Service ${comment}服务层</em>
 * </p>
 *
 * @author ${author}
 * @since ${createTime}
 */
public interface I${className}Service extends IService<${className}>, IBaseService<${className}> {

    /**
     * 唯一性校验
     *
     * @param entity 待校验的对象
     * @return true-校验通过，false-校验不通过
     */
    default boolean checkUnique(${className} entity) {
    #foreach($field in $fields)
        #if($field.getBoolUnique())
        if (StringUtil.isNotBlank(entity.${field.getMethodName}())) {
            QueryWrapper<${className}> wrapper = new QueryWrapper<>();
            wrapper.eq("${field.name}", entity.${field.getMethodName}());
            if (ObjectUtils.isNotEmpty(entity.getId())) {
                wrapper.ne("id", entity.getId());
            }
            if (exists(wrapper)) {
                throw new BaseException(ExceptionEnum.VALIDATE_UNIQUE_ERROR, "${field.name}", entity.${field.getMethodName}());
            }
        }
        #end
    #end
        return true;
    }

    /**
     * 校验是否存在
     *
     * @param id 待校验的对象ID
     * @return true-存在，false-不存在
     */
    default boolean exists(Long id) {
        return exists(new LambdaQueryWrapper<${className}>().eq(${className}::getId, id));
    }

    /**
     * 构建查询条件构造器
     *
     * @param entity 实体类
     * @return 查询条件构造器
     */
    default LambdaQueryWrapper<${className}> buildWrapper(${className} entity) {
        LambdaQueryWrapper<${className}> wrapper = new LambdaQueryWrapper<>();
        #foreach($field in $fields)
            #if($field.getBoolQueryable())
                #if($field.queryType.getCode() == 'BT')
        wrapper.between(entity.${field.getMethodName}Start() != null && entity.${field.getMethodName}End() != null,
                        ${className}::${field.getMethodName} ,entity.${field.getMethodName}Start(), entity.${field.getMethodName}End());
                #else
                    #if($field.javaType.getCode() == 'String')
                        #set($condition='StringUtil.isNotBlank(entity.'+${field.getMethodName}+'())')
                    #else
                        #set($condition='entity.'+${field.getMethodName}+'() != null')
                    #end
        wrapper.${field.queryType.getMp()}(${condition}, ${className}::${field.getMethodName}, entity.${field.getMethodName}());
                #end
            #end
        #end
        return wrapper;
    }

    /**
     * 导入
     *
     * @param file 要导入的excel文件。
     * @return 是否导入成功
     */
    String importData(MultipartFile file);

}
